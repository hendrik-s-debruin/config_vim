extends c

# ==============================================================================
# Printing
# ==============================================================================
snippet cout "print to stdout" b
std::cout << ${1:PRINTOUT} << std::endl;
endsnippet

snippet cerr "print to stderr" b
std::cerr << ${1:PRINTOUT} << std::endl;
endsnippet

# ==============================================================================
# Namespaces
# ==============================================================================
snippet ns "create a namespace" b
/// \cond doxygen_namespace_$1
namespace ${1:NAME}
{
	${0:${VISUAL}}
} /// \endcond namespace $1
endsnippet

snippet uns "using namespace" b
using namespace ${1:NAME};
endsnippet

snippet nsa "namespace alias" b
using ${1:ALIAS_NAME} = ${2:ORIGINAL_NAME};
endsnippet

# ==============================================================================
# Classes
# ==============================================================================
snippet class "create a class" b
class ${1:CLASS_NAME}
{
public:
	$1();
	~$1();

private:
};
endsnippet

# ==============================================================================
# Flow Control
# ==============================================================================
snippet try "create a try-catch block" b
try
{
	${1:${VISUAL}}
}
catch (${2:const std::exception &e})
{
	${3:ERROR HANDLING}
}
$0
endsnippet

snippet fore "for each block" b
for(const auto &${1:el} : ${2:CONTAINER})
{
	${3:${VISUAL}}
}
$0
endsnippet

# ==============================================================================
# Sleep
# ==============================================================================
snippet sleep "sleep" b
std::this_thread::sleep_for(std::chrono::${1:milliseconds}(${2:TIME}));
endsnippet

# ==============================================================================
# Test Driven Development
# ==============================================================================
snippet tdd "Test Driven Development Layout" b
// =============================================================================
// Includes
// =============================================================================
#include <catch2/catch.hpp>

// =============================================================================
// Library Interface
// =============================================================================
namespace ${1:NAMESPACE}
{

}

// =============================================================================
// Local Tests Helper Function Prototypes
// =============================================================================

// =============================================================================
// Test cases
// =============================================================================
TEST_CASE("Test", "[tag]")
{
	REQUIRE( 1 != 2);
}

// =============================================================================
// Library Implementation
// =============================================================================
namespace $1
{

}

// =============================================================================
// Test Helper Function Includes
// =============================================================================

// =============================================================================
// Test Helper Function Globals
// =============================================================================

// =============================================================================
// Test Helper Function Implementations
// =============================================================================

endsnippet
