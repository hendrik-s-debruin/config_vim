# ==============================================================================
# Functions
# ==============================================================================
snippet fn "function"
fn ${1:NAME}(${2:PARAMS}) `!p
if len(t[3]) > 0:
	snip.rv = "-> "
else:
	snip.rv = ""
`${3:RETURN_TYPE}`!p
if len(t[3]) != 0:
	snip.rv = " "
else:
	snip.rv = ""
`{
	$4
}
$0
endsnippet

# ==============================================================================
# Conditions
# ==============================================================================
snippet if "if" b
if ${1:CONDITION} {
	${2:${VISUAL}}
}
$0
endsnippet

snippet ife "if-else" b
if ${1:CONDITION} {
	${2:${VISUAL}}
} else {
	${3:ELSE-BLOCK}
}
$0
endsnippet

snippet ifl "if-let" b
if let ${1:PATTERN} = ${2:EXPRESSION} {
	${3:${VISUAL}}
}
$0
endsnippet

snippet ifle "if-let-else" b
if let ${1:PATTERN} = ${2:EXPRESSION} {
	${3:${VISUAL}}
} else {
	$4
}
$0
endsnippet

snippet match "match" b
match ${1:PATTERN} {
	${2:PATTERN} => ${3:EXPRESSION},
}
$0
endsnippet

# ==============================================================================
# Loops
# ==============================================================================
snippet while "while" b
while ${1:CONDITION} {
	${2:${VISUAL}}
}
$0
endsnippet

snippet for "for" b
for ${1:ELEMENT} in ${2:ITERATOR} {
	${3:${VISUAL}}
}
$0
endsnippet

# ==============================================================================
# Structs
# ==============================================================================
snippet enum "enum" b
enum ${1:NAME} {
	$2
}
$0
endsnippet

snippet struct "struct" b
struct ${1:NAME} {
	$2
}
$0
endsnippet

snippet simpl "struct-implement" b
struct ${1:NAME} {
	$2
}

impl $1 {
	$3
}
$0
endsnippet

snippet trt "trait" b
impl ${1:TRAIT} for ${2:TYPE} {
	${3:${VISUAL}}
}
$0
endsnippet

# ==============================================================================
# Generics
# ==============================================================================
snippet opt "Option<T>"
Option<${1:TYPE}>$0
endsnippet

snippet res "Result<T, E>"
Result<${1:OK_TYPE}, ${2:ERROR_TYPE}>$0
endsnippet

# ==============================================================================
# Organisation
# ==============================================================================
snippet mod "module" b
mod ${1:MODULE_NAME} {
	${2:${VISUAL}}
}
$0
endsnippet

snippet test "unit tests" b
#[cfg(test)]
mod tests {
	#[test]
	${1:fn it_works() {
		assert_eq!(2 + 2, 4);
	}}
}
endsnippet
